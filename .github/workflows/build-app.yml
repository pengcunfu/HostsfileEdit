name: Build Windows Application

on:
  push:
    branches: [ master ]
    tags: ['v*']
  pull_request:
    branches: [ master ]
    paths: ['main.py', 'requirements.txt']
  workflow_dispatch:

# 设置权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-nuitka-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-nuitka-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nuitka
        pip install ordered-set  # Nuitka依赖
        
    - name: Build executable with Nuitka
      run: |
        nuitka --onefile --windows-disable-console --enable-plugin=pyside6 --include-data-files=README.md=README.md --output-filename=HostsFileEditor.exe main.py
        
    - name: Test executable exists
      run: |
        if (Test-Path "HostsFileEditor.exe") {
          Write-Host "Nuitka executable created successfully"
          $file = Get-Item "HostsFileEditor.exe"
          Write-Host "File name: $($file.Name)"
          Write-Host "File size: $([math]::Round($file.Length/1MB, 2)) MB"
          Write-Host "Created: $($file.LastWriteTime)"
        } else {
          Write-Error "Nuitka executable creation failed"
          Get-ChildItem -Recurse
          exit 1
        }
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: HostsFileEditor-Nuitka-${{ github.sha }}
        path: HostsFileEditor.exe
        retention-days: 30
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: HostsFileEditor.exe
        name: Hosts文件编辑工具 ${{ github.ref_name }}
        body: |
          ## Hosts文件编辑工具 - ${{ github.ref_name }}
          
          ### 📥 下载
          - **Windows可执行文件**: `HostsFileEditor.exe`
          - **编译方式**: Nuitka（高性能Python编译器）
          - **文件大小**: 约 15-20MB（比PyInstaller更小）
          - **系统要求**: Windows 7/8/10/11
          - **运行要求**: **必须以管理员权限运行**
          
          ### 🚀 使用方法
          1. 下载 `HostsFileEditor.exe` 文件
          2. **右键选择"以管理员身份运行"**
          3. 开始编辑您的hosts文件！
          
          ### ✨ 主要功能
          - 现代化GUI界面（基于PySide6）
          - 双重编辑模式（文本编辑 + 按条编辑）
          - 智能权限检测和安全保护
          - 便民工具集（文件定位、记事本集成、环境变量）
          - IP地址格式验证
          
          ### 🔧 技术特性
          - **Nuitka编译**: 更快的启动速度和运行性能
          - **优化体积**: 比传统打包方式文件更小
          - **原生性能**: 接近原生C++应用的性能
          - **内存优化**: 更低的内存占用
          
          ### ⚠️ 重要提醒
          - **必须以管理员权限运行**才能修改hosts文件
          - 首次运行可能被杀毒软件误报，请添加信任
          - 建议使用前备份原始hosts文件
          - 修改后执行 `ipconfig /flushdns` 刷新DNS缓存
          
          ### 🔗 相关链接
          - **完整源码**: [GitHub仓库](https://github.com/${{ github.repository }})
          - **使用文档**: [项目README](https://github.com/${{ github.repository }}#readme)
          - **问题反馈**: [提交Issue](https://github.com/${{ github.repository }}/issues)
          
          ---
          
          **感谢使用Hosts文件编辑工具！如果对您有帮助，请给个Star支持！**
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  # 简化的测试作业
  test:
    runs-on: windows-latest
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Test Python syntax
      run: |
        python -m py_compile main.py
        Write-Host "Python syntax check passed"
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        Write-Host "Dependencies installed successfully"
        
    - name: Test basic imports
      run: |
        python -c "
        import sys
        import os
        import re
        import subprocess
        print('Standard library imports successful')
        "
        
    - name: Test PySide6 import
      run: |
        python -c "
        from PySide6.QtWidgets import QApplication
        from PySide6.QtCore import QStringListModel, Qt
        from PySide6.QtGui import QFont
        print('PySide6 imports successful')
        "